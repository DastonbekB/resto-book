generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          Role      @default(CUSTOMER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts                Account[]
    sessions                Session[]
    reservations            Reservation[]
    ownedRestaurants        Restaurant[]             @relation("RestaurantOwner")
    receptionistAssignments ReceptionistAssignment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Restaurant {
    id             String   @id @default(cuid())
    name           String
    description    String?
    location       String // Legacy field for backward compatibility
    region         String? // New structured address: Region
    district       String? // New structured address: District  
    address        String? // New structured address: Street address
    mapLink        String? // Link to map (Google Maps, etc.)
    phone          String?
    email          String?
    website        String?
    images         String
    openingHours   String?
    priceRange     String?
    cuisine        String?
    capacity       Int?
    isActive       Boolean  @default(true)
    isFeatured     Boolean  @default(false)
    ownerId        String
    subscriptionId String? // Link to current subscription
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    owner         User                     @relation("RestaurantOwner", fields: [ownerId], references: [id])
    subscription  Subscription?            @relation(fields: [subscriptionId], references: [id])
    tables        Table[]
    reservations  Reservation[]
    receptionists ReceptionistAssignment[]
    payments      Payment[]
}

model Table {
    id           String   @id @default(cuid())
    number       String
    capacity     Int
    restaurantId String
    isActive     Boolean  @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    reservations Reservation[]

    @@unique([restaurantId, number])
}

model Reservation {
    id           String            @id @default(cuid())
    userId       String
    restaurantId String
    tableId      String?
    date         DateTime
    time         String
    partySize    Int
    status       ReservationStatus @default(PENDING)
    specialNotes String?
    createdAt    DateTime          @default(now())
    updatedAt    DateTime          @updatedAt

    user       User       @relation(fields: [userId], references: [id])
    restaurant Restaurant @relation(fields: [restaurantId], references: [id])
    table      Table?     @relation(fields: [tableId], references: [id])
    checkIns   CheckIn[]
}

model ReceptionistAssignment {
    id           String   @id @default(cuid())
    userId       String
    restaurantId String
    createdAt    DateTime @default(now())

    user       User       @relation(fields: [userId], references: [id])
    restaurant Restaurant @relation(fields: [restaurantId], references: [id])

    @@unique([userId, restaurantId])
}

model CheckIn {
    id            String   @id @default(cuid())
    reservationId String
    checkedInAt   DateTime @default(now())
    checkedInBy   String?

    reservation Reservation @relation(fields: [reservationId], references: [id])
}

model Payment {
    id           String        @id @default(cuid())
    restaurantId String
    amount       Float
    status       PaymentStatus @default(PENDING)
    type         PaymentType   @default(PROMOTION)
    description  String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    restaurant Restaurant @relation(fields: [restaurantId], references: [id])
}

model SubscriptionPlan {
    id                      String   @id @default(cuid())
    name                    String   @unique
    description             String?
    price                   Float
    billingPeriod           String // "monthly" or "yearly"
    features                String // JSON string of features
    maxTables               Int? // Maximum number of tables allowed
    maxReservationsPerMonth Int? // Maximum reservations per month
    hasAnalytics            Boolean  @default(false)
    hasSMSNotifications     Boolean  @default(false)
    hasAPIAccess            Boolean  @default(false)
    hasCustomBranding       Boolean  @default(false)
    hasPrioritySupport      Boolean  @default(false)
    isActive                Boolean  @default(true)
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt

    subscriptions Subscription[]
}

model Subscription {
    id               String             @id @default(cuid())
    restaurantId     String? // Optional - can be null for standalone subscriptions
    planId           String
    status           SubscriptionStatus @default(ACTIVE)
    startDate        DateTime           @default(now())
    endDate          DateTime?
    nextBillingDate  DateTime?
    cancelledAt      DateTime?
    trialEndsAt      DateTime?
    isTrialActive    Boolean            @default(false)
    reservationsUsed Int                @default(0) // Track monthly usage
    resetDate        DateTime? // When to reset monthly counters
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt

    plan        SubscriptionPlan @relation(fields: [planId], references: [id])
    restaurants Restaurant[]
}

enum Role {
    SUPER_ADMIN
    RESTAURANT_ADMIN
    RECEPTION_ADMIN
    CUSTOMER
}

enum ReservationStatus {
    PENDING
    CONFIRMED
    CHECKED_IN
    COMPLETED
    CANCELLED
    NO_SHOW
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
}

enum PaymentType {
    PROMOTION
    SUBSCRIPTION
    FEATURED_LISTING
}

enum SubscriptionStatus {
    ACTIVE
    CANCELLED
    EXPIRED
    TRIAL
    PAST_DUE
}
